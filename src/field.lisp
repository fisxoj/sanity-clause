(defpackage sanity-clause.field
  (:use #:cl
	#:alexandria
	#:cl-arrows)
  (:export #:field
           #:validation-error))

(in-package :sanity-clause.field)


(deftype missing ()
  :missing)


(defclass field ()
  ((attribute :type (or null symbol)
	      :initarg :attribute
	      :reader attribute-of
	      :documentation "Name of the attribute to write the field's value to when serializing, if null, inferred from the name of the field.")
   (data-key :type (or null string)
	     :initarg :data-key
	     :reader data-key-of
	     :documentation "Name of the attribute to read the field's value from when deserializing, if null, inferred form the name of the field.")
   (default :type t
	    :initarg :default
	    :reader default-of
	    :initform :missing
	    :documentation "Value to use during serialization when no value is set.")
   (validator :type (or null function list)
	      :initarg :validator
	      :initform (constantly t)
	      :reader validator-of)
   (data-flow :type (member :both :load :dump)
	      :initarg :flow
	      :initform :both
	      :reader data-flow-of
	      :documentation "If data should only ever be loaded into this field, this is :both (the default).  If data should only be deserialized from the field and ignored when serializing, :load.  If data should only be serialized from the field but ignored during loading, :dump.")
   (required :type boolean
	     :initarg :required
	     :initform nil
	     :reader required-p))
  (:documentation "A base class for all fields that controls how they are (de?)serialized."))


(defclass string-field (field)
  ()
  (:documentation "A field that contains a string."))

(defclass list-field (field)
  ((element-field :type field
                  :initarg :element-field
                  :reader element-field-of
                  :documentation "The field that respresents the elements of the list."))
  (:documentation "A field that contains a list of values satsified by another field."))

(defclass nested-field (field)
  ((nested-field :type field
                 )))

(defclass boolean-field (field)
  ()
  (:documentation "A field type for bolean values."))


(defclass property-list-field (field)
  ()
  (:documentation "A field for representing associative data as a plist."))

(defclass association-list-field (field)
  ()
  (:documentation "A field for representing associative data as an alist."))

(defclass url-field (string-field)
  ()
  (:documentation "A field for values that should be URLs."))

(defclass email-field (string-field)
  ()
  (:documentation "A field for values that should be emails."))

(defclass constant-field (field)
  ((constant :initarg :constant
             :reader constant-of
             :documentation "The constant value to be serialized or deserialized.")))

(define-condition validation-error (error)
  ((error-messages :type list
		   :initarg :error-messages
		   :reader error-messages-of
		   :documentation "A list of any error messages generated by the a field."))
  (:documentation "Error that indicates a field is invalid."))

(defun all-validators (field)
  "Returns a generator function that yields a validator function each call."

  (declare (type field field))
  (let ((validators (etypecase (validator-of field)
		      (null (list (constantly t)))
		      (function (list (validator-of field)))
		      (list (validator-of field)))))
    (lambda ()
      (pop validators))))


(defgeneric validate (field value)
  (:documentation "Run the validation checks for a given field and raise a validation error if it is invalid.")
  (:method ((field field) value)
    (when-let ((errors (->> (loop with validators = (all-validators field)
				  for validator = (funcall validators)
				  while validator
				  ;; Collect nils for non-errors, strings for errors.
				  collecting
				  (handler-case (prog1 nil
						  (funcall validator value))
				    (v:<validation-error> (e)
                                      (princ-to-string e))))
			    (remove-if #'null))))
      (error 'validation-error :error-messages errors))
    (values)))


(defgeneric get-value (field object)
  (:documentation "Tries to fetch the value corresponding to the field from some datastructure.")

  (:method ((field field) (object standard-object))
     (if (slot-boundp object (attribute-of field))
	(slot-value object (attribute-of field))
	(default-of field)))

  (:method ((field field) (object list))
    (etypecase object
      (trivial-types:association-list (or (cdr (assoc (attribute-of field) object)) (default-of field)))
      (trivial-types:property-list (getf object (attribute-of field) (default-of field))))))
